<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- xml를 활용한 공통코드 -->
<mapper namespace="org.zerock.mapper.BoardMapper">
<!--CDATA : 부호,특수문자의 문자열처리를 위하여 사용  -->
<!-- create1 : DB에서 번호 생성 -->
<insert id="insert">
<![CDATA[
insert into tbl_board (bno, title, content, writer) values (seq_board.nextval, #{title}, #{content}, #{writer})
]]>
</insert>
<!-- create2 : 번호 생성 후 DB 입력 -->
<insert id="insertSelectKey">
<selectKey keyProperty="bno" order="BEFORE" resultType="long">
select seq_board.nextval from dual
</selectKey>
<![CDATA[
insert into tbl_board (bno, title, content, writer) values (#{bno}, #{title}, #{content}, #{writer})
]]>
</insert>
<!-- read_all -->
<select id="getList" resultType="org.zerock.domain.BoardVO">
<![CDATA[
select * from tbl_board where bno > 0
]]>
</select>

<!-- read_all + 페이징 처리 + 검색어 조건 추가 -->
<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
<![CDATA[
select bno, title, content, writer, regdate, updatedate from 
(select  /*+INDEX_DESC(tbl_board pk_board)*/ rownum rn, bno, title, content, writer, regdate, updatedate from tbl_board where 
]]>
<include refid="criteia"></include>
<![CDATA[
rownum <= #{pageNum} * #{amount}) where rn > (#{pageNum}-1) * #{amount}
]]>
</select>

<!-- 페이징 : 전체 보드수 구하기 + 검색어에 의한 데이터 개수 구하기 -->
<select id="getTotalCount" resultType="int">
<![CDATA[
select count(*) from tbl_board where
]]>
<include refid="criteia"></include>
<![CDATA[
bno > 0
]]>
</select>

<!-- read_one -->
<select id="read" resultType="org.zerock.domain.BoardVO">
<![CDATA[
select * from tbl_board where bno = #{bno}
]]>
</select>
<!-- update -->
<update id="update">
<![CDATA[
update tbl_board set title=#{title}, content=#{content}, writer=#{writer}, updatedate=sysdate where bno = #{bno}
]]>
</update>
<!-- delete -->
<delete id="delete">
<![CDATA[
delete from tbl_board where bno = #{bno}
]]>
</delete>


<!--검색어 처리를 위한 sql (include용) -->
<sql id="criteia">
 <trim prefix="(" suffix=") and" prefixOverrides="or">
 <foreach item="type" collection="typeArr">
  <trim prefix="or">
   <choose>
    <when test="type == 'T'.toString()">
    title like '%'||#{keyword}||'%'
    </when>
    <when test="type == 'C'.toString()">
    content like '%'||#{keyword}||'%'
    </when>
    <when test="type== 'W'.toString()">
    writer like '%'||#{keyword}||'%'
    </when>
   </choose>
  </trim>
 </foreach>
</trim>
</sql>
</mapper>